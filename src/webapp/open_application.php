<?php

require_once "utils/session_utils.php";
require_once 'db/db_config.php';
require_once 'db/Database.php';
require_once 'utils/utils.php';
require_once 'int/config.php';

/* Maybe put this in the database */
const COMPONENT_SETTINGS = [ '' ,
							 '{"LaTeX":{"Enabled":true},"CSV":{"Enabled":true,"Separator":"","Delimiter":""}}' ,
							 '{"prefix":"","author":"Automatically Generated by CORDET Editor","copyright":"","param_attr":"","var_attr":"","max_line_length":80,"indent":2,"includes":["CrFwUserConstants.h"]}',
							 '{}',
							 '{"general":{"release":0,"issue":1,"preamble":""},"txf":{"preamble":"","offset":0,"length":0},"paf":{"preamble":"","offset":0,"length":0},"pcf":{"preamble":"","offset":0,"length":0},"pcpc":{"preamble":"","offset":0,"length":0},"ccf":{"preamble":"","offset":0,"length":0},"cpc":{"preamble":"","offset":0,"length":0},"pid":{"preamble":"","offset":0,"length":0},"prf":{"preamble":"","offset":0,"length":0},"caf":{"preamble":"","offset":0,"length":0}}',
							 '{"prefix":"","author":"Automatically Generated by CORDET Editor","copyright":"","max_line_length":80,"indent":2,"struct_attr":"","endian":{"swap":true,"fnc":"__builtin_bswap"},"crc_size":2,"includes":["CrFwUserConstants.h"]}', 
							 '{"prefix":"","author":"Automatically Generated by CORDET Editor","copyright":"","max_line_length":80,"indent":2,"CrFwOutFactoryMaxNOfOutCmp":50,"CrFwInFactoryMaxNOfInCmd":50,"CrFwInFactoryMaxNOfInRep":50,"CrFwOutRegistryN":50,"includes":["CrFwUserConstants.h"]}',
							 '{"prefix":"","author":"Automatically Generated by CORDET Editor","copyright":"","param_attr":"","var_attr":"","max_line_length":80,"indent":2,"dpid_offset":0,"includes":["CrFwUserConstants.h"]}'];


session_start();
check_session();

if (!isset($_GET["idProject"]) || !isset($_GET["idApplication"])) {
	http_response_code(403);
	die('Forbidden');
}

if (!check_user_can_access_project($_GET["idProject"])) {
	http_response_code(403);
	die('Forbidden');
}


$database = new Database();
$message_dp_list = "";
$message_build_app = "";
$calibration_import_msg = "";

$userrole = $database->select("SELECT idRole FROM userproject WHERE idProject = ? AND idUser = ?", ["ii", [$_GET["idProject"], $_SESSION['userid']]]);
$id_role = count($userrole) > 0 ? $userrole[0]['idRole'] : 5;

/* Relations */
if (isset($_POST["add_relation"]) && $id_role < 4)
	add_relation($database, $_POST["idApplication"], $_POST["idStandard"][$_POST["add_relation"]], $_POST["relation_type"][$_POST["add_relation"]]);

if (isset($_POST["chg_relation"]) && $id_role < 4)
	change_relation($database, $_POST["idApplication"], $_POST["idStandard"][$_POST["chg_relation"]], $_POST["relation_type"][$_POST["chg_relation"]]);

if (isset($_POST["del_relation"]) && $id_role < 4)
	delete_relation($database, $_POST["idApplication"], $_POST["idStandard"][$_POST["del_relation"]]);

/* Components */
if (isset($_POST["add_component"]) && $id_role < 4)
	add_component($database, $_POST["idApplication"], $_POST["idComponent"][$_POST["add_component"]]);

if (isset($_POST["del_component"]) && $id_role < 4)
	delete_component($database, $_POST["idApplication"], $_POST["idComponent"][$_POST["del_component"]]);

if (isset($_POST["deact_component"]) && $id_role < 4)
	deactivate_component($database, $_POST["idApplication"], $_POST["idComponent"][$_POST["deact_component"]]);

if (isset($_POST["act_component"]) && $id_role < 4)
	activate_component($database, $_POST["idApplication"], $_POST["idComponent"][$_POST["act_component"]]);

if (isset($_POST["cal_curve_submit"]) && $id_role < 4)
	$calibration_import_msg = import_calibration_curve($database);

if (isset($_POST["build"]) && $id_role < 4) {
	$cmd = $python_settings["cmd"] . " " . $python_settings["script_path"] . "build_app.py " . $_GET["idProject"] . " " . $_GET["idApplication"] . " 2>&1";

	$file = shell_exec($cmd);
	$file = substr($file, 0, strlen($file) - 1);

	if (file_exists($file)) {
		$message_build_app .= $file . "\n\n";
		lib_dwnFile(true, $file);
	} else {
		$message_build_app .= "Error: file could not be created!\n";
		$message_build_app .= "Following error occured during execution:\n";
		$message_build_app .= $file;
	}
}

if (isset($_POST["build_dp_list"]) && $id_role < 4) {
	$message_dp_list = "The build Datapool CSV function is called.\n\n";

	$cmd = $python_settings["cmd"] . " " . $python_settings["script_path"] . "build_dp_csv.py " . $_GET["idProject"] . " " . $_GET["idApplication"] . " 2>&1";

	$file = shell_exec($cmd);
	$file = substr($file, 0, strlen($file) - 1);

	if (file_exists($file)) {
		$message_dp_list .= $file . "\n\n";
		lib_dwnFile(true, $file);
	} else {
		$message_dp_list .= "Error: file could not be created!\n";
		$message_dp_list .= "Following error occured during execution:\n";
		$message_dp_list .= $file;
	}
}


$project = $database->select("SELECT name, `desc` FROM project WHERE id = ?",
							 ["i", [$_GET["idProject"]]]);

$application = $database->select("SELECT name, `desc` FROM application WHERE id = ?",
								 ["i", [$_GET["idApplication"]]]);

$standards = $database->select("SELECT id, name FROM standard WHERE idProject = ?",
							   ["i", [$_GET['idProject']]]);

$components = $database->select("SELECT id, name, idApplication, active " .
								"FROM (SELECT c.id, c.name " .
								"FROM component c " .
								"ORDER BY c.id) comp LEFT JOIN (SELECT a.idApplication, a.active, a.idComponent " .
								"FROM applicationcomponent a " .
								"WHERE a.idApplication = ?) app ON app.idComponent = comp.id",
								["i", [$_GET['idApplication']]]);


$relations = $database->select(
	"SELECT s.id, idProject, name, idApplication, idStandard, relation " .
	"FROM standard s INNER JOIN applicationstandard a ON a.idStandard = s.id " .
	"WHERE s.idProject = ? AND a.idApplication = ? " .
	"ORDER BY idStandard", ["ii", [$_GET['idProject'], $_GET['idApplication']]]);

$rel_map = [];
foreach($relations as $rel)
	$rel_map[$rel["id"]] = $rel;


$sidebar_actions = [
	[ "label" => "Back", "link" => "open_project.php?id=" . $_GET['idProject'] ],
	["label" => "Home", "link" => "index.php"]
];

// Template settings
$site_js = "js/open_application.js";
$site_css = "layout/application.css";
$pagetitle = "Application " . $application[0]["name"];
$tpl = "open_application.tpl.php";
include "template.php";



function add_relation($database, $idApplication, $idStandard, $relation)
{
	$database->insert("INSERT INTO applicationstandard (idApplication, idStandard, relation) VALUES(?,?,?)",
					  ["iii", [$idApplication, $idStandard, $relation]]);
}

function change_relation($database, $idApplication, $idStandard, $relation)
{
	$database->execute_non_query("UPDATE applicationstandard SET relation = ? WHERE idApplication = ? AND idStandard = ?",
								 ["iii", [$relation, $idApplication, $idStandard]]);
}


function delete_relation($database, $idApplication, $idStandard)
{
	$database->execute_non_query("DELETE FROM applicationstandard WHERE idApplication = ? AND idStandard = ?",
								 ["ii", [$idApplication, $idStandard]]);
}


function add_component($database, $idApplication, $idComponent)
{
	$database->insert("INSERT INTO applicationcomponent (idApplication, idComponent, setting, active) VALUES(?,?,?,1)",
					  ["iis", [$idApplication ,$idComponent, COMPONENT_SETTINGS[$idComponent]]]);
}

function activate_component($database, $idApplication, $idComponent)
{
	$database->execute_non_query("UPDATE applicationcomponent SET `active` = 1 WHERE idApplication = ? AND idComponent = ?",
								 ["ii", [$idApplication, $idComponent]]);
}

function deactivate_component($database, $idApplication, $idComponent)
{
	$database->execute_non_query("UPDATE applicationcomponent SET `active` = 0 WHERE idApplication = ? AND idComponent = ?",
								 ["ii", [$idApplication, $idComponent]]);
}

function delete_component($database, $idApplication, $idComponent)
{
	$database->execute_non_query("DELETE FROM applicationcomponent WHERE idApplication = ? AND idComponent = ?",
								 ["ii", [$idApplication, $idComponent]]);
}

function import_calibration_curve($database)
{
	if (!isset($_FILES["cal_curve_file"]))
		return "No file selected\n";

	$format_error_msg = array("1" => "File has a wrong format.\nShould be '<xval><tab><yval>' with one entry per line.\n",
							  "2" => "File has wrong format.\nShould be 'polN<tab><value>' where N is a number from 1 to 5 and one entry per line.\n",
							  "3" => "File has wrong format.\nShould be 'logN<tab><value>' where N is a number from 1 to 5 and one entry per line.\n");

	$import_success_msg = array("1" => "Calibration curve successfully created.\n",
								"2" => "Input points successfully added to calibration curve.\n",
								"3" => "Input points successfully replaced in calibration curve\n");

	$curve = [];
	// get existing calibration curve or create empty one
	if ($_POST["cal_curve_action"] == 1) {
		$curve["name"] = $_POST["cal_curve_name"];
		$curve["shortDesc"] = $_POST["cal_curve_short_desc"];
		$curve["type"] = $_POST["cal_curve_type"] - 1;

		switch($_POST["cal_curve_type"]) {
			case "1":
				$setting = array( "engfmt" => $_POST["cal_curve_eng_format"],
								  "rawfmt" => $_POST["cal_curve_raw_format"],
								  "radix" => $_POST["cal_curve_radix"],
								  "unit" => $_POST["cal_curve_unit"],
								  "values" => []);
				break;
			case "2":
				$setting = ["pol1" => 0, "pol2" => 0, "pol3" => 0, "pol4" => 0, "pol5" => 0];
				break;
			case "3":
				$setting = ["log1" => 0, "log2" => 0, "log3" => 0, "log4" => 0, "log5" => 0];
				break;
		}

		$curve["setting"] = $setting;
	} else {
		$curve = $database->select(
			"SELECT id, `type`, name, shortDesc, setting " .
			"FROM calibration WHERE id = ?", ["i", [$_POST["cal_curve_existing"]]]);

		if (count($curve) == 0)
			return "Calibration curve doesn't exist";

		$curve = $curve[0];

		$curve["setting"] = json_decode($curve["setting"], true);
		$curve["type"] = $_POST["cal_curve_type"] - 1;
	}
	

	// read input data
	if ($handle = fopen($_FILES["cal_curve_file"]["tmp_name"], "r")) {
		$row_num = 0;
		$input_values = [];
		while ($line = fgets($handle)) {
			$line = str_replace(["\r", "\n"], "", $line);
			$values = explode("\t", $line);
			if(count($values) != 2)
				return format_error_msg[$_POST["cal_curve_type"]];
			switch($_POST["cal_curve_type"]) {
				case "1":
					$input_values[] = array("xval" => (int)$values[0], "yval" => (int)$values[1] );
					break;
				case "2":
				case "3":
					$input_values[$values[0]] = $values[1];
					break;
			}
			
			$row_num++;
		}
		fclose($handle);
	} else {
		return "Error reading file\n";
	}

	// Update curve with data from file
	if ($_POST["cal_curve_action"] == 2) {
		// Add new points here
		if ($_POST["cal_curve_type"] == 1) {
			// Insert at correct position
			foreach($input_values as $in_val) {
				foreach($curve["setting"]["values"] as $idx => $curve_val) {
					if ($curve_val["xval"] > $in_val["xval"]) {
						$curve["setting"]["values"] = array_merge(
							array_slice($curve["setting"]["values"], 0, $idx),
							array($in_val),
							array_slice($curve["setting"]["values"], $idx)
						);
					}
				}
			}
		} else {
			foreach($input_values as $idx => $value)
				$curve["setting"][$idx] = $value;
		}

	} else {
		// replace all points here
		if ($_POST["cal_curve_type"] == 1) {
			$curve["setting"]["values"] = $input_values;
		} else {
			foreach($input_values as $idx => $value)
				$curve["setting"][$idx] = $value;
		}

	}

	$curve["setting"] = json_encode($curve["setting"]);

	// Save data back in database
	try {
		if (isset($curve["id"])) {
			$database->execute_non_query(
				"UPDATE calibration " .
				"SET `type` = ?, name = ?, shortDesc = ?, setting = ? " .
				"WHERE id = ?",
				["isssi", [$curve["type"], $curve["name"], $curve["shortDesc"], $curve["setting"], $curve["id"]]]);
		} else {
			$database->insert(
				"INSERT INTO calibration (idStandard, `type`, name, shortDesc, setting) " .
				"VALUES (?,?,?,?,?)",
				["iisss", [$_POST["cal_curve_standard"], $curve["type"], $curve["name"], $curve["shortDesc"], $curve["setting"]]]);
		}
	} catch (Exception $e) {
		return "Error while trying to write to database: " + $e->getMessage();
	}
	
	return $import_success_msg[$_POST["cal_curve_action"]];
}

?>
